/* eslint-disable no-restricted-globals */
/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
 */

const http = require('http');
const numWorkers = require('os').cpus().length;
const cluster = require('cluster');

(async function () {

  const app = await require('../app')()
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);
  /**
   * Listen on provided port, on all network interfaces.
   */
  if (cluster.isMaster) {
    console.log(`Master cluster setting up ${numWorkers} workers...`);

    for (let i = 0; i < numWorkers;) {
      cluster.fork();
      i += 1;
    }

    cluster.on('online', (worker) => {
      console.log(`Worker ${worker.process.pid} is online`);
    });

    cluster.on('exit', (worker, code, signal) => {
      console.log(`Worker ${worker.process.pid} died with code: ${code}, and signal: ${signal}`);
      console.log('Starting a new worker');
      cluster.fork();
    });
  } else {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    const p = parseInt(val, 10);

    if (isNaN(p)) {
      // named pipe
      return val;
    }

    if (p >= 0) {
      // port number
      return p;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    console.log(`Listening on ${bind}`);
  }
}());
